//This file is automatically generated by MotionPRO Suite
//DO NOT MODIFY THIS FILE; your changes will be overwritten

// Exercise 6 - Indexing with Speed and Position moves controlled by host control panel
//
// Motion selection:
//    IndexValue = 1 = Position move 
//    IndexValue = 2 = Speed move
//    IndexValue = 3 = Stop move
//
// Motion is triggered when StartMotion >= 1

  int IndexValue; // Define integer variable IndexValue

  int TempIndexValue; // Define integer variable TempIndexValue

  long StartMotion; // Define long integer variable StartMotion

  fixed HostSpeed; // Define fixed variable HostSpeed

// End of user variable definition
  IndexValue = 0;

  TempIndexValue = 0;

  StartMotion = 0;

  HostSpeed = 26.6667;

// End of user variable initialization
MotionIndexingLoop: //Define label MotionIndexingLoop

  // Define event : When variable StartMotion is equal or over value 1 IU
  !VO StartMotion, 1;
  WAIT!; // Wait until the event occurs

  StartMotion = 0;

  GOTO Case_0_IndexValue_End, IndexValue, NEQ; //Branch to Case_0_IndexValue_End if IndexValue != 0

// Code for Case 0 starts here
  CALL IndexFunction0; //Call function IndexFunction0

// Code for Case 0 ends here
  GOTO Switch_IndexValue_End; //Branch to Switch_IndexValue_End

Case_0_IndexValue_End: //Define label Case_0_IndexValue_End

  TempIndexValue = IndexValue;

  TempIndexValue -= 1;

  GOTO Case_1_IndexValue_End, TempIndexValue, NEQ; //Branch to Case_1_IndexValue_End if TempIndexValue != 0

// Code for Case 1 starts here
  CALL IndexFunction1; //Call function IndexFunction1

// Code for Case 1 ends here
  GOTO Switch_IndexValue_End; //Branch to Switch_IndexValue_End

Case_1_IndexValue_End: //Define label Case_1_IndexValue_End

  TempIndexValue = IndexValue;

  TempIndexValue -= 2;

  GOTO Case_2_IndexValue_End, TempIndexValue, NEQ; //Branch to Case_2_IndexValue_End if TempIndexValue != 0

// Code for Case 2 starts here
  CALL IndexFunction2; //Call function IndexFunction2

// Code for Case 2 ends here
  GOTO Switch_IndexValue_End; //Branch to Switch_IndexValue_End

Case_2_IndexValue_End: //Define label Case_2_IndexValue_End

  TempIndexValue = IndexValue;

  TempIndexValue -= 3;

  GOTO Case_3_IndexValue_End, TempIndexValue, NEQ; //Branch to Case_3_IndexValue_End if TempIndexValue != 0

// Code for Case 3 starts here
  CALL IndexFunction3; //Call function IndexFunction3

// Code for Case 3 ends here
  GOTO Switch_IndexValue_End; //Branch to Switch_IndexValue_End

Case_3_IndexValue_End: //Define label Case_3_IndexValue_End

// Code for Defaule Case starts here
  CALL IndexFunctionDefault; //Call function IndexFunctionDefault

// Code for Default Case ends here
Switch_IndexValue_End: //Define label Switch_IndexValue_End

// End of Switch (IndexValue)
  GOTO MotionIndexingLoop; //Branch to MotionIndexingLoop

// End of Main program loop
// End of program
